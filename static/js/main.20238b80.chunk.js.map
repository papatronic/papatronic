{"version":3,"sources":["assets/google_chrome_logo.png","assets/mozilla_firefox_logo.png","assets/apple_safari_logo.png","contexts/AppContext.js","components/ContextComponent.js","routes/Home.js","components/FlexContainers.js","constants/strings.js","routes/NotFound.js","routes/Predict.js","routes/BrowserNotSupported.js","constants/colors.js","App.js","helpers/BrowserInformation.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppContext","React","createContext","ContextComponent","_ref","context","Component","value","rest","Object","objectWithoutProperties","Provider","react_default","a","createElement","react_router","Home","useContext","supported","to","FlexContainer","styled","div","_templateObject","FlexCard","_templateObject2","NotFoundStrings","code","title","body","buttonText","BrowserNotSupportedStrings","googleChromeDownloadLink","mozillaFirefoxDownloadLink","NotFound","_useContext","_useContext$colors","colors","BLUE","GOLD","className","style","color","id","NFS","react_router_dom","backgroundColor","Predict","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","contextType","BrowserNotSupported","BNSS","href","src","mozillaFirefoxLogo","alt","appleSafariLogo","googleChromeLogo","DARKEST_BLUE","LIGHT_BLUE","DARKEST_GOLD","LIGHT_GOLD","App","console","log","ColorTheme","_BrowserInformation","nameOffset","verOffset","ix","userAgent","navigator","browserName","appName","version","parseFloat","appVersion","completeVersion","parseInt","indexOf","substring","lastIndexOf","toLowerCase","toUpperCase","isNaN","BrowserInformation","components_ContextComponent","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20238b80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/google_chrome_logo.8956d082.png\";","module.exports = __webpack_public_path__ + \"static/media/mozilla_firefox_logo.4b15dabd.png\";","module.exports = __webpack_public_path__ + \"static/media/apple_safari_logo.139274a4.png\";","import React from 'react';\n\nexport const AppContext = React.createContext();","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst ContextComponent = ({ context, Component, value, ...rest }) => {\n    const { Provider } = context;\n    return (\n        <Route {...rest}>\n            <Provider value={value}>\n                <Component />\n            </Provider>\n        </Route>\n    );\n}\n\nexport default ContextComponent;","import React, { useContext } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { AppContext } from '../contexts/AppContext';\n\nfunction Home() {\n  const { supported } = useContext(AppContext);\n  return (\n    !supported ? <Redirect to='/browser-not-supported' /> :\n    <div>Hello! Im the Home component!</div>\n  );\n}\n\nexport default Home;","import styled from 'styled-components';\n\nexport const FlexContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FlexCard = styled.div`\n  display: flex;\n  flex-direction: column;\n`;","const NotFoundStrings = {\n  code: '404',\n  title: 'Página no encontrada',\n  body: 'La ruta a la que quieres acceder ha sido movida temporalmente, no existe o ha sido renombrada.',\n  buttonText: 'PÁGINA PRINCIPAL'\n}\n\nconst BrowserNotSupportedStrings = {\n  title: 'Tu navegador no es compatible con ésta aplicación.',\n  googleChromeDownloadLink: 'https://www.google.com/chrome/b/',\n  mozillaFirefoxDownloadLink: 'https://www.mozilla.org/en-US/firefox/new/'\n};\n\nexport { \n  NotFoundStrings as NFS,\n  BrowserNotSupportedStrings as BNSS\n};","import React, { useContext } from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport { FlexContainer, FlexCard } from '../components/FlexContainers';\nimport { AppContext } from '../contexts/AppContext';\nimport { NFS } from '../constants/strings';\nimport '../styles/not-found.css';\n\nfunction NotFound() {\n  const { supported, colors: { BLUE, GOLD } } = useContext(AppContext);\n  return (\n    !supported ? <Redirect to='/browser-not-supported' /> :\n    <FlexContainer className=\"NFarentContainer\">\n      <FlexCard className=\"NFCard\">\n        <div className=\"NFTitles\" style={{color: BLUE}}>\n          <div id=\"NFCode\">{NFS.code}</div>\n          <div id=\"NFTitle\">{NFS.title}</div>\n        </div>\n        <div className=\"NFBody\">\n          <div id=\"NFBodyBody\">{NFS.body}</div>\n        </div>\n        <Link className=\"NFButton\" id=\"NFButtonStyle\" to=\"/\" style={{backgroundColor: GOLD}}>{NFS.buttonText}</Link>\n      </FlexCard>\n    </FlexContainer>\n  );\n}\n\nexport default NotFound;","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { AppContext } from '../contexts/AppContext';\n\nclass Predict extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      !this.context.supported ? <Redirect to='/browser-not-supported' /> :\n      <div>Hello! Im the Predict component!</div>\n    );\n  }\n}\n\nPredict.contextType = AppContext;\n\nexport default Predict;","import React, { useContext } from 'react';\nimport { FlexContainer, FlexCard } from '../components/FlexContainers';\nimport { AppContext } from '../contexts/AppContext';\nimport { BNSS } from '../constants/strings';\nimport googleChromeLogo from '../assets/google_chrome_logo.png';\nimport mozillaFirefoxLogo from '../assets/mozilla_firefox_logo.png';\nimport appleSafariLogo from '../assets/apple_safari_logo.png';\nimport '../styles/browser-not-supported.css';\n\nfunction BrowserNotSupported() {\n  const { colors: { BLUE, GOLD } } = useContext(AppContext);\n  return (\n    <FlexContainer className=\"BNSParentContainer\">\n      <FlexCard className=\"BNSCard\">\n        <div style={{color: BLUE}} className=\"BNSTitle\">\n          <h3>{BNSS.title}</h3>\n        </div>\n        <div className=\"BNSBody\">\n          <p>\n            Tu navegador no es compatible con las tecnologías que utilizamos. \n            Para la correcta visualización de éste sitio es necesario que nos \n            visites desde <a href={BNSS.googleChromeDownloadLink} style={{color: GOLD}}>Google Chrome</a>, <a href={BNSS.mozillaFirefoxDownloadLink} style={{color: GOLD}}>Mozilla Firefox</a> o Apple Safari.\n          </p>\n        </div>\n        <FlexCard className=\"BNSImageContainer\">\n          <img src={mozillaFirefoxLogo} className=\"BNSBrowsersImage\" alt=\"Navegador Mozilla Firefox\"></img>\n          <img src={appleSafariLogo} className=\"BNSBrowsersImage\" alt=\"Navegador Apple Safari\"></img>\n          <img src={googleChromeLogo} className=\"BNSBrowsersImage\" alt=\"Navegador Google Chrome\"></img>\n        </FlexCard>\n      </FlexCard>\n    </FlexContainer>\n  );\n}\n\nexport default BrowserNotSupported;","export default {\n  DARKEST_BLUE: '#002A5A',\n  BLUE: '#2E5287',\n  LIGHT_BLUE: '#607EB7',\n  DARKEST_GOLD: '#A07D30',\n  GOLD: '#D4AC5D',\n  LIGHT_GOLD: '#FFDE8C'\n}","import React from 'react';\nimport { HashRouter, Switch } from 'react-router-dom';\nimport { AppContext } from './contexts/AppContext';\nimport BrowserInformation from './helpers/BrowserInformation'\nimport ContextComponent from './components/ContextComponent';\nimport Home from './routes/Home';\nimport NotFound from './routes/NotFound';\nimport Predict from './routes/Predict';\nimport BrowserNotSupported from './routes/BrowserNotSupported';\nimport ColorTheme from './constants/colors';\n\nfunction App() {\n  console.log(ColorTheme)\n  const { version, completeVersion, browserName, supported } = BrowserInformation();\n  return (\n    <HashRouter>\n      <Switch>\n        <ContextComponent Component={Home} context={AppContext} value={{ version, completeVersion, browserName, supported, colors: ColorTheme }} exact path='/' />\n        <ContextComponent exact path='/predict' value={{ version, completeVersion, browserName, supported, colors: ColorTheme }} context={AppContext} Component={Predict} />\n        <ContextComponent exact path='/browser-not-supported' value={{ version, completeVersion, browserName, supported, colors: ColorTheme }} context={AppContext} Component={BrowserNotSupported} />\n        <ContextComponent Component={NotFound} value={{ version, completeVersion, browserName, supported, colors: ColorTheme }} context={AppContext} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","export default function BrowserInformation() {\n  const userAgent = navigator.userAgent;\n  let browserName = navigator.appName;\n  let version = '' + parseFloat(navigator.appVersion);\n  let completeVersion = parseInt(navigator.appVersion, 10);\n  let nameOffset, verOffset, ix, supported = false;\n  // In Opera, the true version is after \"Opera\" or after \"Version\"\n  if ((verOffset = userAgent.indexOf(\"Opera\")) !== -1) {\n    browserName = \"Opera\";\n    supported = true;\n    version = userAgent.substring(verOffset + 6);\n    if ((verOffset = userAgent.indexOf(\"Version\")) !== -1)\n      version = userAgent.substring(verOffset + 8);\n  }\n  // In MSIE, the true version is after \"MSIE\" in userAgent\n  else if ((verOffset = userAgent.indexOf(\"MSIE\")) !== -1) {\n    browserName = \"Microsoft Internet Explorer\";\n    version = userAgent.substring(verOffset + 5);\n  }\n  // In Chrome, the true version is after \"Chrome\" \n  else if ((verOffset = userAgent.indexOf(\"Chrome\")) !== -1) {\n    browserName = \"Chrome\";\n    supported = true;\n    version = userAgent.substring(verOffset + 7);\n  }\n  // In Safari, the true version is after \"Safari\" or after \"Version\" \n  else if ((verOffset = userAgent.indexOf(\"Safari\")) !== -1) {\n    browserName = \"Apple Safari\";\n    supported = true;\n    version = userAgent.substring(verOffset + 7);\n    if ((verOffset = userAgent.indexOf(\"Version\")) !== -1)\n      version = userAgent.substring(verOffset + 8);\n  }\n  // In Firefox, the true version is after \"Firefox\" \n  else if ((verOffset = userAgent.indexOf(\"Firefox\")) !== -1) {\n    browserName = \"Mozilla Firefox\";\n    supported = true;\n    version = userAgent.substring(verOffset + 8);\n  }\n  // In most other browsers, \"name/version\" is at the end of userAgent \n  else if ((nameOffset = userAgent.lastIndexOf(' ') + 1) < (verOffset = userAgent.lastIndexOf('/'))) {\n    browserName = userAgent.substring(nameOffset, verOffset);\n    version = userAgent.substring(verOffset + 1);\n    if (browserName.toLowerCase() === browserName.toUpperCase()) {\n      browserName = navigator.appName;\n    }\n  }\n  // trim the version string at semicolon/space if present\n  if ((ix = version.indexOf(\";\")) !== -1) version = version.substring(0, ix);\n  if ((ix = version.indexOf(\" \")) !== -1) version = version.substring(0, ix);\n\n  completeVersion = parseInt('' + version, 10);\n  if (isNaN(completeVersion)) {\n    version = '' + parseFloat(navigator.appVersion);\n    completeVersion = parseInt(navigator.appVersion, 10);\n  }\n\n  return {\n    browserName,\n    version,\n    completeVersion,\n    supported\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}